{"version":3,"sources":["DailyCovidTrackingContext.js","AppContext.js","HeatmapUSA.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["DailyCovidTrackingContext","React","createContext","undefined","DailyCovidTrackingProvider","children","useState","transformCovidTracking","DailyCovidTracking","covidTracking","setCovidTracking","useEffect","fetch","then","resp","json","data","Provider","value","standardizeDate","date","moment","String","covidTrackingData","states","Set","metrics","forEach","stateData","add","state","Object","entries","metric","accMetric","maxDate","isBefore","minDate","isAfter","maxValue","minValue","metricsByDate","metricNames","keys","AppContext","defaultMetric","metricNameToOption","defaultDate","defaultStartDate","clone","subtract","defaultEndDate","AppContextProvider","useContext","metricOptions","filter","m","includes","map","selectedMetric","setSelectedMetric","selectedDate","setSelectedDate","start","end","selectedDateRange","setSelectedDateRange","useReducer","selectStatesReducer","colorIndex","schemeCategory10","selectedStates","toggleSelectedState","selectedTimeSeries","metricSelection","dates","d","sort","a","b","unix","Array","from","values","flatMap","valueByState","TimeSeries","name","columns","points","format","s","selectedMetricToTimeSeries","selectedMetricData","timeseries","context","updateSelectedMetric","updateSelectedDate","isValid","updateSelectedDateRange","prevState","unitedState","newState","hasOwnProperty","length","metricName","label","str","match","x","toUpperCase","substr","toLowerCase","join","HeatmapUSA","atTime","toDate","colorScale","scaleSequential","domain","interpolator","interpolateBlues","statesConfig","reduce","acc","fill","clickHandler","event","target","dataset","st","hmRef","useRef","useLayoutEffect","current","getElementsByClassName","path","style","stroke","color","className","ref","Legend","legendTitle","height","width","defaultFill","customize","title","legendRef","legendSvg","select","selectAll","remove","attr","legendColorScale","assign","copy","interpolateRound","range","append","canvas","document","createElement","getContext","i","fillStyle","fillRect","colorRamp","toDataURL","call","axisBottom","g","marginTop","text","LineGraph","onTrackerChanged","timeWindow","TimeRange","trackerPosition","setTrackerPosition","updateDate","debounce","updateTracker","throttle","timeseriesWindow","crop","stateMetricLines","props","key","axis","series","styler","axisStyle","fontSize","textAnchor","min","collection","max","axisValues","get","id","hideScale","timeAxisAngledLabels","paddingRight","paddingBottom","timeAxisHeight","timeRange","background","DateRangeSelector","timerange","setTimeRange","updateDateRange","tr","begin","updateBrushRange","paddingLeft","paddingTop","onTimeRangeChanged","type","tickCount","App","href","onChange","options","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4b5d51a8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\n\nimport DailyCovidTracking from './covid_tracking_states_daily_2020-05-09'\n\n\nconst DailyCovidTrackingContext = React.createContext(undefined);\n\n\nexport function DailyCovidTrackingProvider({children}) {\n  const [covidTracking, setCovidTracking] = useState(transformCovidTracking(DailyCovidTracking));\n  \n\n  useEffect(() => {\n    fetch('https://covidtracking.com/api/states/daily')\n      .then(resp => resp.json())\n      .then(data => setCovidTracking(transformCovidTracking(data)));\n  }, []);\n\n  return (\n    <DailyCovidTrackingContext.Provider value={covidTracking}>\n      {children}\n    </DailyCovidTrackingContext.Provider>\n  );\n}\n\nexport { standardizeDate };\nexport default DailyCovidTrackingContext;\n\nfunction standardizeDate(date) {\n  return moment(String(date));\n} \n\nfunction transformCovidTracking(covidTrackingData) {\n  const states = new Set();\n  const metrics = {};\n\n  covidTrackingData.forEach(stateData => {\n    states.add(stateData.state);\n    const date = standardizeDate(stateData.date);\n\n    Object.entries(stateData).forEach(([metric, value]) => {\n      if (!metrics[metric]) {\n        metrics[metric] = {\n          maxDate: date,\n          minDate: date,\n          maxValue: value,\n          minValue: value,\n          metricsByDate: { [stateData.date]: { [stateData.state]: value } }\n        };\n      } else {\n        const accMetric = metrics[metric];\n        accMetric.maxDate = accMetric.maxDate.isBefore(date) ? date : accMetric.maxDate;\n        accMetric.minDate = accMetric.minDate.isAfter(date) ? date : accMetric.minDate;\n\n        accMetric.maxValue = value > accMetric.maxValue ? value : accMetric.maxValue;\n        accMetric.minValue = value < accMetric.minValue ? value : accMetric.minValue;\n\n        if (accMetric.metricsByDate[stateData.date]) {\n          accMetric.metricsByDate[stateData.date][stateData.state] = value;\n        } else {\n          accMetric.metricsByDate[stateData.date] = {[stateData.state]: value};\n        }\n      }\n    })\n  });\n\n  const metricNames = Object.keys(metrics)\n\n  return {\n    covidTracking: covidTrackingData,\n    states,\n    metrics,\n    metricNames\n  };\n}","import React, { useState, useContext, useReducer } from 'react';\nimport moment from 'moment';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { TimeSeries } from 'pondjs';\nimport DailyCovidTrackingContext, { standardizeDate } from './DailyCovidTrackingContext';\n\n\n\nconst AppContext = React.createContext(undefined);\n\nconst defaultMetric = metricNameToOption('positive');\nconst defaultDate = moment('2020-04-12');\nconst defaultStartDate =  defaultDate.clone().subtract(7, 'days');\nconst defaultEndDate = defaultDate.clone().add(7, 'days');\n\n\nexport function AppContextProvider({children}) {\n  const { metricNames, metrics } = useContext(DailyCovidTrackingContext);\n\n  const metricOptions = metricNames\n    .filter(m => !['state', 'date'].includes(m))\n    .map(m => metricNameToOption(m));\n  const [selectedMetric, setSelectedMetric] = useState(defaultMetric);\n  \n  const [selectedDate, setSelectedDate] = useState(defaultDate);\n  const [selectedDateRange, setSelectedDateRange] = useState({start: defaultStartDate, end: defaultEndDate});\n\n  const updateSelectedDate = (date) => {\n    if (\n      date.isValid &&\n      date.isAfter(selectedDateRange.start) &&\n      date.isBefore(selectedDateRange.end)\n    ) {\n      setSelectedDate(date);\n    }\n  };\n\n  const updateSelectedDateRange = ({start, end}) => {\n    if (selectedDate.isAfter(end)) {\n      setSelectedDate(end);\n    }\n\n    if (selectedDate.isBefore(start)) {\n      setSelectedDate(start);\n    }\n\n    setSelectedDateRange({start, end});\n  }\n\n  const [selectedStates, toggleSelectedState] = useReducer(selectStatesReducer, {\n    colorIndex: 5,\n      states : {\n        'TX': schemeCategory10[1],\n        'CA': schemeCategory10[2],\n        'NY': schemeCategory10[3],\n        'GA': schemeCategory10[4]\n      }\n  });\n\n  const selectedTimeSeries = selectedMetricToTimeSeries(selectedMetric, metrics);\n  const selectedMetricData = {\n    ...metrics[selectedMetric.value],\n    timeseries: selectedTimeSeries\n  };\n\n  const context = {\n    metricOptions,\n    selectedMetric,\n    updateSelectedMetric: setSelectedMetric,\n    selectedDate,\n    updateSelectedDate,\n    selectedDateRange,\n    updateSelectedDateRange,\n    toggleSelectedState,\n    selectedStates: selectedStates.states,\n    selectedMetricData\n  };\n\n  return (\n    <AppContext.Provider value={context}>\n      {children}\n    </AppContext.Provider>\n  );\n}\n\n\nfunction selectStatesReducer(prevState, unitedState) {\n  const newState = {...prevState, states: {...prevState.states}};\n  if (prevState.states.hasOwnProperty(unitedState)) {\n    delete newState.states[unitedState];\n  } else {\n    newState.states[unitedState] = schemeCategory10[newState.colorIndex % schemeCategory10.length];\n    newState.colorIndex = newState.colorIndex + 1;\n  }\n\n  return newState;\n}\n\nfunction metricNameToOption(metricName) {\n  return {\n    value: metricName,\n    label: camelCaseToWords(metricName)\n  };\n}\n\n\nfunction camelCaseToWords(str) {\n    return str.match(/^[a-z]+|[A-Z][a-z]*/g).map(function(x){\n        return x[0].toUpperCase() + x.substr(1).toLowerCase();\n    }).join(' ');\n};\n\nfunction selectedMetricToTimeSeries(metricSelection, metrics) {\n  const { metricsByDate } = metrics[metricSelection.value];\n  const dates = Object.keys(metricsByDate)\n    .map(d => standardizeDate(d))\n    .sort((a, b) => a.unix() - b.unix());\n\n  const states = Array.from(new Set(\n    Object.values(metricsByDate)\n      .flatMap(valueByState => Object.keys(valueByState))\n  ));\n\n  return new TimeSeries({\n    name: metricSelection.value,\n    columns: ['index', ...states],\n    points: dates.map(d => [\n        d.format('YYYY-MM-DD'),\n        ...states.map(s =>\n          metricsByDate[d.format('YYYYMMDD')][s]\n        )\n      ])\n  });\n}\n\nexport default AppContext;\n\n\n","import React, { useRef, useLayoutEffect, useEffect } from 'react';\nimport USAMap from 'react-usa-map';\nimport { scaleSequential } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport { interpolateBlues } from 'd3-scale-chromatic';\nimport { interpolateRound } from 'd3-interpolate';\nimport { axisBottom } from 'd3-axis';\nimport './HeatmapUSA.css';\n\n\nexport default function HeatmapUSA({\n  selectedDate,\n  selectedStates,\n  toggleSelectedState,\n  selectedMetricData\n}) {\n  const { timeseries, maxValue, minValue } = selectedMetricData;\n\n  const data = timeseries.atTime(selectedDate.toDate()).data();\n  const colorScale = scaleSequential()\n      .domain([minValue, maxValue])\n      .interpolator(interpolateBlues);\n\n  const statesConfig = Array.from(data.entries()).reduce((acc, [state, value]) => {\n    acc[state] = {\n      fill: colorScale(value)\n    };\n    return acc;\n  }, {});\n  \n  const clickHandler = event => toggleSelectedState(event.target.dataset.name)\n  Array.from(data.keys()).forEach(st => {\n    if (statesConfig[st]) {\n      statesConfig[st].clickHandler = clickHandler;\n    } else {\n      statesConfig[st] = { clickHandler };\n    }\n  })\n\n  const hmRef = useRef();\n  useLayoutEffect(() => {\n    Array.from(hmRef.current.getElementsByClassName('state'))\n      .forEach(path => path.style.stroke = '')\n\n    Object.entries(selectedStates)\n      .forEach(([state, color]) => {\n        Array.from(hmRef.current.getElementsByClassName(state))\n          .forEach(path => path.style.stroke = color);\n      });\n  }, [selectedStates]);\n\n  return (\n    <div className=\"heatmap\" ref={hmRef}>\n      <h4>{selectedDate.format('MM/DD/YYYY')}</h4>\n      <Legend\n        colorScale={colorScale}\n        legendTitle={`COVID ${timeseries.name()}`}\n      />\n      <USAMap\n        height={250}\n        width={360}\n        defaultFill='#808080'\n        customize={statesConfig}\n      />\n    </div>\n  );\n}\n\n\nfunction colorRamp(colorScale, width) {\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  for (let i = 0; i < width; ++i) {\n    context.fillStyle = colorScale(i / (width - 1));\n    context.fillRect(i, 0, 1, 40);\n  }\n  return canvas;\n}\n\n\nfunction Legend({colorScale, legendTitle}) {\n  const tickSize = 6;\n  const width = 320;\n  const height = 44 + tickSize;\n  const marginTop = 18;\n  const marginRight = 0;\n  const marginBottom = 16 + tickSize;\n  const marginLeft = 0;\n  const title = legendTitle;\n  \n  const legendRef = useRef(null);\n\n  useEffect(() => {\n    const legendSvg = select(legendRef.current);\n\n    legendSvg.selectAll('*').remove();\n\n    legendSvg\n      .attr('width', width)\n      .attr('height', height)\n      .attr('viewBox', [0, 0, width, height])\n      .style('overflow', 'visible')\n      .style('display', 'block');\n\n    let tickAdjust = g => g.selectAll('.tick line').attr('y1', marginTop + marginBottom - height);\n    const legendColorScale = Object.assign(colorScale.copy()\n        .interpolator(interpolateRound(marginLeft, width - marginRight)),\n        {range() { return [marginLeft, width - marginRight]; }});\n\n\n    legendSvg.append('image')\n        .attr('x', marginLeft)\n        .attr('y', marginTop)\n        .attr('width', width - marginLeft - marginRight)\n        .attr('height', height)\n        .attr('preserveAspectRatio', 'none')\n        .attr('xlink:href', colorRamp(colorScale.interpolator(), width).toDataURL());\n\n    legendSvg.append('g')\n      .attr('transform', `translate(0,${height - marginBottom})`)\n      .call(axisBottom(legendColorScale))\n      .call(tickAdjust)\n      .call(g => g.select('.domain').remove())\n      .call(g => g.append('text')\n        .attr('x', marginLeft)\n        .attr('y', marginTop + marginBottom - height - 6)\n        .attr('fill', 'currentColor')\n        .attr('text-anchor', 'start')\n        .attr('font-weight', 'bold')\n        .text(title));\n  }, [colorScale, height, marginBottom, title]);\n\n  return <svg ref={legendRef}></svg>;\n}\n","import React, { useState } from 'react';\nimport moment from 'moment';\nimport {\n    Charts,\n    ChartContainer,\n    ChartRow,\n    YAxis,\n    LineChart,\n    styler,\n    LabelAxis,\n    Brush\n} from 'react-timeseries-charts';\nimport { TimeRange } from 'pondjs';\nimport debounce from 'lodash.debounce';\nimport throttle from 'lodash.throttle';\n\n\nexport default function LineGraph({\n  selectedDate,\n  onTrackerChanged,\n  selectedStates,\n  selectedDateRange,\n  updateSelectedDateRange,\n  selectedMetricData\n}) {\n  const { timeseries } = selectedMetricData;\n\n  const { start, end } = selectedDateRange;\n  const timeWindow = new TimeRange(start, end);\n\n  const [trackerPosition, setTrackerPosition] = useState(selectedDate.toDate());\n\n  const updateDate = debounce(d => onTrackerChanged(moment(d), 500));\n  const updateTracker = throttle(setTrackerPosition, 10)\n\n  const dateSelectionChange = d => {\n    updateTracker(d)\n    const date = moment(d);\n    if (date.isBefore(selectedDate, 'day') || date.isAfter(selectedDate, 'day')) {\n      updateDate(date);\n    }\n    updateTracker(d)\n  }\n    \n  const timeseriesWindow = timeseries.crop(timeWindow);\n  const stateMetricLines = Object.entries(selectedStates)\n    .map(([state, color]) => {\n      const props = {\n          key: state,\n          axis: state + 'axis',\n          series: timeseriesWindow,\n          columns: [state],\n          style: styler([{key: state, color: color, width: 3}])\n      };\n\n      const axisStyle = {\n        label: { fontSize: 30, textAnchor: 'middle', fill: color }\n      };\n\n      const min = timeseriesWindow.collection().min(state);\n      const max = timeseriesWindow.collection().max(state);\n      const value = timeseriesWindow.atTime(selectedDate.toDate())\n        .data().get(state)\n\n      // const min = 1\n      // const max = 2\n      // const value = 3\n\n      const axisValues = [\n        {label: 'max', value: max},\n        {label: 'min', value: min},\n        {label: 'value', value: value}\n      ];\n\n      return (\n        <ChartRow height='100' key={state}>\n          <LabelAxis id={state + 'axis'}\n            label={state}\n            values={axisValues}\n            hideScale={true}\n            style={axisStyle}\n            width={150}\n            min={min}\n            max={max}\n          />\n          <Charts>\n            <LineChart {...props}/>\n          </Charts>\n        </ChartRow>\n      );\n    });\n\n  return (\n    <ChartContainer\n      timeAxisAngledLabels={true}\n      paddingRight={10}\n      paddingBottom={15}\n      timeAxisHeight={35}\n      timeRange={timeWindow}\n      width={380}\n      style={{background: 'white'}}\n      trackerPosition={trackerPosition}\n      onTrackerChanged={dateSelectionChange}\n    >\n      {stateMetricLines}\n    </ChartContainer>\n  );\n}\n\n\nexport function DateRangeSelector({\n  selectedDateRange,\n  updateSelectedDateRange,\n  selectedDate,\n  selectedStates,\n  selectedMetricData\n}) {\n  const { maxValue, minValue, timeseries } = selectedMetricData;\n\n  const [timerange, setTimeRange] = useState(new TimeRange(selectedDateRange.start, selectedDateRange.end))\n\n  const updateDateRange = debounce(tr => {\n    updateSelectedDateRange({start: moment(tr.begin()), end: moment(tr.end())})\n  }, 100);\n  const updateBrushRange = throttle(tr => setTimeRange(tr), 20);\n  const onTimeRangeChanged = tr => {\n    updateDateRange(tr);\n    updateBrushRange(tr);\n  };\n\n  const style = styler(\n    timeseries.columns()\n      .map(state => ({\n        key: state,\n        color: selectedStates[state] || 'steelblue',\n        width: selectedStates[state] ? 4 : 1\n      }))\n  );\n\n  return (\n    <ChartContainer\n      timeAxisAngledLabels={true}\n      paddingRight={10}\n      paddingLeft={-45}\n      paddingBottom={15}\n      paddingTop={5}\n      timeRange={timeseries.timerange()}\n      width={330}\n      style={{background: 'white'}}\n      trackerPosition={selectedDate.toDate()}\n    >\n      <ChartRow height='50'>\n        <Brush\n          timeRange={timerange}\n          onTimeRangeChanged={onTimeRangeChanged}\n        />\n        <YAxis id='axis1'\n          type='linear' \n          min={minValue}\n          max={maxValue}\n          tickCount={3}\n        />\n        <Charts>\n          <LineChart axis='axis1'\n            series={timeseries}\n            columns={timeseries.columns()}\n            style={style}\n          />\n        </Charts>\n      </ChartRow>\n    </ChartContainer>\n  );\n}","import React, { useContext } from 'react';\nimport Select from 'react-select';\n\nimport './App.css';\nimport AppContext from './AppContext';\nimport HeatmapUSA from './HeatmapUSA';\nimport LineGraph, { DateRangeSelector } from './LineGraph';\n\n\nfunction App(props) {\n  const {\n    selectedMetric,\n    selectedDate,\n    updateSelectedDate,\n    metricOptions,\n    updateSelectedMetric,\n    toggleSelectedState,\n    selectedStates,\n    selectedDateRange,\n    updateSelectedDateRange,\n    selectedMetricData\n  } = useContext(AppContext);\n\n  return (\n    <div className='App'>\n      <div className=\"title\">\n        <h1>COVID Tracker</h1>\n        <p>data source: \n          <a href=\"https://covidtracking.com/\" target=\"_blank\">The COVID Tracking Project</a>\n        </p>\n      </div>\n      <div className='container'>\n        <div className='side-block'>\n          <Select\n            value={selectedMetric}\n            onChange={updateSelectedMetric}\n            options={metricOptions}\n          />\n          <DateRangeSelector\n            selectedMetricData={selectedMetricData}\n            selectedDate={selectedDate}\n            selectedDateRange={selectedDateRange}\n            updateSelectedDateRange={updateSelectedDateRange}\n            selectedStates={selectedStates}\n          />\n          <HeatmapUSA\n            selectedDate={selectedDate}\n            selectedMetricData={selectedMetricData}\n            toggleSelectedState={toggleSelectedState}\n            selectedStates={selectedStates}\n          />\n        </div>\n        <div className='plots'>\n          <LineGraph\n            selectedDate={selectedDate}\n            onTrackerChanged={updateSelectedDate}\n            selectedStates={selectedStates}\n            selectedMetricData={selectedMetricData}\n            selectedDateRange={selectedDateRange}\n            updateSelectedDateRange={updateSelectedDateRange}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { DailyCovidTrackingProvider } from './DailyCovidTrackingContext'\nimport { AppContextProvider } from './AppContext'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DailyCovidTrackingProvider>\n      <AppContextProvider>\n        <App />\n      </AppContextProvider>\n    </DailyCovidTrackingProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}